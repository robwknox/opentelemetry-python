#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys

from thrift.TRecursive import fix_spec
from thrift.Thrift import TType
from thrift.transport import TTransport

all_structs = []


class DependencyLink(object):
    """
    Attributes:
     - parent: parent service name (caller)
     - child: child service name (callee)
     - callCount: total traced calls made from parent to child
     - errorCount: how many calls are known to be errors

    """


    def __init__(self, parent=None, child=None, callCount=None, errorCount=None,):
        self.parent = parent
        self.child = child
        self.callCount = callCount
        self.errorCount = errorCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.parent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.child = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.callCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.errorCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DependencyLink')
        if self.parent is not None:
            oprot.writeFieldBegin('parent', TType.STRING, 1)
            oprot.writeString(self.parent.encode('utf-8') if sys.version_info[0] == 2 else self.parent)
            oprot.writeFieldEnd()
        if self.child is not None:
            oprot.writeFieldBegin('child', TType.STRING, 2)
            oprot.writeString(self.child.encode('utf-8') if sys.version_info[0] == 2 else self.child)
            oprot.writeFieldEnd()
        if self.callCount is not None:
            oprot.writeFieldBegin('callCount', TType.I64, 4)
            oprot.writeI64(self.callCount)
            oprot.writeFieldEnd()
        if self.errorCount is not None:
            oprot.writeFieldBegin('errorCount', TType.I64, 5)
            oprot.writeI64(self.errorCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Dependencies(object):
    """
    Attributes:
     - start_ts: milliseconds from epoch
     - end_ts: milliseconds from epoch
     - links

    """


    def __init__(self, start_ts=None, end_ts=None, links=None,):
        self.start_ts = start_ts
        self.end_ts = end_ts
        self.links = links

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.start_ts = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.end_ts = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.links = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = DependencyLink()
                        _elem5.read(iprot)
                        self.links.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Dependencies')
        if self.start_ts is not None:
            oprot.writeFieldBegin('start_ts', TType.I64, 1)
            oprot.writeI64(self.start_ts)
            oprot.writeFieldEnd()
        if self.end_ts is not None:
            oprot.writeFieldBegin('end_ts', TType.I64, 2)
            oprot.writeI64(self.end_ts)
            oprot.writeFieldEnd()
        if self.links is not None:
            oprot.writeFieldBegin('links', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.links))
            for iter6 in self.links:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DependencyLink)
DependencyLink.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'parent', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'child', 'UTF8', None, ),  # 2
    None,  # 3
    (4, TType.I64, 'callCount', None, None, ),  # 4
    (5, TType.I64, 'errorCount', None, None, ),  # 5
)
all_structs.append(Dependencies)
Dependencies.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'start_ts', None, None, ),  # 1
    (2, TType.I64, 'end_ts', None, None, ),  # 2
    (3, TType.LIST, 'links', (TType.STRUCT, [DependencyLink, None], False), None, ),  # 3
)
fix_spec(all_structs)
del all_structs
